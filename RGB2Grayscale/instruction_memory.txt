instruction_rom[0] = 32'b000000000000_00000_000_00011_0010011;  //addi x3,x0,0
instruction_rom[1] = 32'b000000000000_00000_000_00101_0010011;   //addi x5,x0,0
instruction_rom[3] = 32'b000000000000_00000_000_00110_0010011;  //addi x6,x0,0
instruction_rom[4] = 32'b010010110000_00000_000_00111_0010011;  //addi x7,x0,36  # 4x3n, n = number of pixels
instruction_rom[5] = 32'b00000000100000000000_00001_1101111;    //jal x1,4   #store the pc value in x1 to use in jalr later
instruction_rom[6] = 32'b000000000000_00101_010_11100_0000011;  //lw x28,0(x5)  #r - loop
instruction_rom[7] = 32'b000000000100_00101_010_11101_0000011;  //lw x29,4(x5)  #g
instruction_rom[8] = 32'b000000001000_00101_010_11110_0000011;  //lw x30,8(x5)  #b
instruction_rom[9] = 32'b0100000_00010_11100_101_11100_0010011;  //srai x28,x28,2  #r/4
instruction_rom[10] = 32'b0100000_00001_11101_101_11101_0010011;  //srai x29,x29,1  #g/2
instruction_rom[11] = 32'b0100000_00011_11110_101_11110_0010011;  //srai x30,x30,3  #b/8
instruction_rom[12] = 32'b0000000_11101_11100_000_00110_0110011;  //add x6,x28,x29  #x6 = r + g
instruction_rom[13] = 32'b0000000_11110_00110_000_00110_0110011;  //add x6,x6,x30   #x6 = x6 + b
instruction_rom[14] = 32'b0000000_00110_00011_010_00000_0100011;  //sw x6,0(x3)   #store from location 0
instruction_rom[15] = 32'b000000000100_00011_000_00011_0010011;  //addi x3,x3,4   # x3 = x3 + 4, increment the location
instruction_rom[16] = 32'b000000001100_00101_000_00101_0010011;  //addi x5,x5,12  # x5 = x5 + 12, increment the pixel count
instruction_rom[17] = 32'b0000000_00111_00101_101_00100_1100011;  // x7 >= x5
instruction_rom[18] = 32'b000000000000_00001_000_00010_1100111;  //jalr x2,x1,0   #jump to loop
instruction_rom[19] = 32'b000000000000_00000_000_00001_0010011;  //addi x1,x0,0  # constraint_mode